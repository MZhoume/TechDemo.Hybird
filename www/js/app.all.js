/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var SocketSvc = (function () {
            function SocketSvc(_dataSvc, _ionicLoading) {
                this._dataSvc = _dataSvc;
                this._ionicLoading = _ionicLoading;
            }
            SocketSvc.prototype.StartListening = function (ipAddr, portNum, callback, errCallback) {
                var _this = this;
                console.log('Connectiong to: ' + ipAddr + ':' + portNum);
                this._isListening = true;
                this._ionicLoading.show({
                    template: 'Retrieving data...<br />Please wait...'
                });
                try {
                    this._socket = new WebSocket("ws://" + ipAddr + ':' + portNum);
                    this._socket.onmessage = function (msg) {
                        _this._dataSvc.onMsgReceived(msg);
                        callback(msg);
                        if (!_this._gotDirective) {
                            _this._ionicLoading.hide();
                            _this._gotDirective = true;
                        }
                    };
                    this._socket.onerror = function (e) {
                        _this._ionicLoading.hide();
                        errCallback('An error occured from the WebSocket...');
                    };
                }
                catch (err) {
                    this._ionicLoading.hide();
                    errCallback(err);
                }
            };
            SocketSvc.prototype.StopListening = function () {
                console.log('Disconnecting...');
                this._isListening = false;
                this._socket.close();
                this._socket.onmessage = null;
                this._socket.onerror = null;
            };
            SocketSvc.prototype.SendStr = function (str) {
                this._socket.send(str);
            };
            SocketSvc.$inject = ['DataSvc', '$ionicLoading'];
            return SocketSvc;
        })();
        angular.module('app').service('SocketSvc', SocketSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var DataSvc = (function () {
            function DataSvc(_templateCache) {
                this._templateCache = _templateCache;
                this.onDataReceived = function () {
                };
                _templateCache.put('intro.html', 'Please open settings pane for connecting to the server.');
            }
            DataSvc.prototype.onMsgReceived = function (msg) {
                if (!this._hasInited) {
                    this._hasInited = true;
                    var payload = JSON.parse(msg.data);
                    this._templateCache.put('intro.html', payload.introduction);
                    this._templateCache.put('control.html', payload.directive);
                }
                else {
                    var data = JSON.parse(msg.data);
                    for (var i = 0; i < data.length; i++) {
                        var e = data[i];
                        this.data[i].push(e);
                    }
                    this.onDataReceived(data);
                }
            };
            DataSvc.$inject = ['$templateCache'];
            return DataSvc;
        })();
        angular.module('app').service('DataSvc', DataSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="./service/socketSvc.ts" />
/// <reference path="./service/dataSvc.ts" />
/// <reference path="./interfaces/interface.ts" /> 

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var ChartCtrl = (function () {
            function ChartCtrl() {
                this.HasControl = false;
                this.title = 'Chart';
            }
            return ChartCtrl;
        })();
        angular.module('app').controller('home.ChartCtrl', ChartCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var MonitorCtrl = (function () {
            function MonitorCtrl(_dataSvc) {
                this._dataSvc = _dataSvc;
                this.data = [{
                    rowid: 0,
                    serverID: 1,
                    names: ['aaa', 'bbb', 'ccc'],
                    values: [2, 3, 4]
                }, {
                    rowid: 1,
                    serverID: 2,
                    names: ['a', 'b', 'c'],
                    values: [12, 13, 14]
                }];
            }
            MonitorCtrl.$inject = ['DataSvc'];
            return MonitorCtrl;
        })();
        angular.module('app').controller('home.MonitorCtrl', MonitorCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var introduction;
    (function (introduction) {
        var IntroductionCtrl = (function () {
            function IntroductionCtrl(_dataSvc) {
                this._dataSvc = _dataSvc;
            }
            IntroductionCtrl.$inject = ['DataSvc'];
            return IntroductionCtrl;
        })();
        angular.module('app').controller('IntroductionCtrl', IntroductionCtrl);
    })(introduction = app.introduction || (app.introduction = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var settings;
    (function (settings) {
        var SettingsCtrl = (function () {
            function SettingsCtrl(_scope, _socketSvc, _ionicPopup, _ionicModel) {
                this._scope = _scope;
                this._socketSvc = _socketSvc;
                this._ionicPopup = _ionicPopup;
                this._ionicModel = _ionicModel;
                this.msgs = [];
                this.btnString = 'Start';
                this._isListening = false;
                _ionicModel.fromTemplateUrl('../../settings/settings.html', {
                    scope: _scope,
                    animation: 'slide-in-up'
                }).then(function (m) {
                    _scope.model = m;
                });
                _scope.showModal = function () {
                    _scope.model.show();
                };
                _scope.hideModal = function () {
                    _scope.model.hide();
                };
            }
            SettingsCtrl.prototype.startCommand = function () {
                var _this = this;
                if (!this._isListening) {
                    this.msgs = [];
                    this.msgs.push('Start Listening...');
                    this._isListening = true;
                    this.btnString = 'Stop';
                    this._socketSvc.StartListening(this.ipAddress, this.portNum, function (msg) {
                        _this.msgs.push("Data received at " + msg.timeStamp);
                    }, function (err) {
                        _this.msgs.push(err);
                        _this._ionicPopup.show({
                            title: 'Error!',
                            template: 'An error occured while connecting to server...',
                            buttons: [{ text: 'OK' }]
                        });
                        _this._isListening = false;
                        _this.btnString = 'Start';
                    });
                }
                else {
                    this.msgs.push('Stop Listening...');
                    this._socketSvc.StopListening();
                    this._isListening = false;
                    this.btnString = 'Start';
                }
            };
            SettingsCtrl.$inject = ['$scope', 'SocketSvc', '$ionicPopup', '$ionicModal'];
            return SettingsCtrl;
        })();
        angular.module('app').controller('SettingsCtrl', SettingsCtrl);
    })(settings = app.settings || (app.settings = {}));
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,