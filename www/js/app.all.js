/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var SocketSvc = (function () {
            function SocketSvc(_dataSvc) {
                this._dataSvc = _dataSvc;
            }
            SocketSvc.prototype.StartListening = function (ipAddr, portNum, callback, errCallback) {
                var _this = this;
                console.log('Connectiong to: ' + ipAddr + ':' + portNum);
                this._isListening = true;
                try {
                    this._socket = new WebSocket("ws://" + ipAddr + ':' + portNum);
                    this._socket.onmessage = function (msg) {
                        _this._dataSvc.onMsgReceived(msg);
                        callback(msg);
                        _this._socket.send(JSON.stringify({ isStopIntended: false }));
                    };
                    this._socket.onerror = function (e) {
                        errCallback('An error occured from the WebSocket...');
                    };
                    setTimeout(function () {
                        _this._socket.send(JSON.stringify({ isStopIntended: false }));
                    }, 300);
                }
                catch (err) {
                    errCallback(err);
                }
            };
            SocketSvc.prototype.StopListening = function () {
                console.log('Disconnecting...');
                this._isListening = false;
                this._socket.send(JSON.stringify({ isStopIntended: true }));
                this._socket.close();
                this._socket.onmessage = null;
                this._socket.onerror = null;
            };
            SocketSvc.prototype.SendStr = function (str) {
                this._socket.send(str);
            };
            SocketSvc.$inject = ['DataSvc'];
            return SocketSvc;
        })();
        angular.module('app').service('SocketSvc', SocketSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var DataSvc = (function () {
            function DataSvc(_templateCache) {
                this._templateCache = _templateCache;
                this.data = [];
                this.onDataReceived = function () {
                };
                this.onIntroductionReceived = function () {
                };
                this.onDirectiveReceived = function () {
                };
                //_templateCache.put('control.html', '');
            }
            DataSvc.prototype.onMsgReceived = function (msg) {
                var payload = JSON.parse(msg.data);
                if (payload.directive) {
                    this.onIntroductionReceived.call(this, payload.introduction);
                    this.onDirectiveReceived.call(this, payload.directive);
                }
                else {
                    for (var i = 0; i < payload.length; i++) {
                        var e = payload[i];
                        if (!this.data[i]) {
                            this.data[i] = [];
                        }
                        this.data[i].push(e);
                    }
                    this.onDataReceived(payload);
                }
            };
            DataSvc.$inject = ['$templateCache'];
            return DataSvc;
        })();
        angular.module('app').service('DataSvc', DataSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="./service/socketSvc.ts" />
/// <reference path="./service/dataSvc.ts" />
/// <reference path="./interfaces/interface.ts" /> 

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var ChartCtrl = (function () {
            function ChartCtrl(_stateParams, _dataSvc, _state) {
                var _this = this;
                this._stateParams = _stateParams;
                this._dataSvc = _dataSvc;
                this._state = _state;
                this.id = parseInt(_stateParams['id']);
                this.count = 1;
                if (_dataSvc.data.length == 0) {
                    return;
                }
                var dats = _dataSvc.data[this.id];
                var model = dats[0];
                this.series = model.Names;
                this.labels = [];
                this.data = [];
                for (var i = 0; i < dats.length; i++) {
                    this.labels.push(this.count.toString());
                    this.count++;
                    for (var j = 0; j < model.Names.length; j++) {
                        this.data[j] = this.data[j] || [];
                        var v = dats[i].Values[j];
                        this.data[j].push(v);
                    }
                }
                _dataSvc.onDataReceived = function (d) {
                    _this._state.reload();
                };
            }
            ChartCtrl.$inject = ['$stateParams', 'DataSvc', '$state'];
            return ChartCtrl;
        })();
        angular.module('app').controller('home.ChartCtrl', ChartCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var MonitorCtrl = (function () {
            function MonitorCtrl(_dataSvc, _scope, _state) {
                var _this = this;
                this._dataSvc = _dataSvc;
                this._scope = _scope;
                this._state = _state;
                this._scope.data = [];
                _dataSvc.onDataReceived = function (d) {
                    for (var i = 0; i < d.length; i++) {
                        var element = d[i];
                        _this._scope.data[i] = element;
                    }
                    _this._scope.$apply();
                };
                var count = _dataSvc.data.length;
                if (count > 0) {
                    for (var i = 0; i < count; i++) {
                        var element = _dataSvc.data[i][_dataSvc.data[i].length - 1];
                        _scope.data.push(element);
                    }
                }
            }
            MonitorCtrl.prototype.drawChart = function (id) {
                this._state.go('home.chart', { "id": id });
            };
            MonitorCtrl.$inject = ['DataSvc', '$scope', '$state'];
            return MonitorCtrl;
        })();
        angular.module('app').controller('home.MonitorCtrl', MonitorCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var introduction;
    (function (introduction) {
        var IntroductionCtrl = (function () {
            function IntroductionCtrl(_dataSvc) {
                var _this = this;
                this._dataSvc = _dataSvc;
                this.introduction = 'Please open settings pane for connecting to the server.';
                _dataSvc.onIntroductionReceived = function (i) { return _this.introduction = i; };
            }
            IntroductionCtrl.$inject = ['DataSvc'];
            return IntroductionCtrl;
        })();
        angular.module('app').controller('IntroductionCtrl', IntroductionCtrl);
    })(introduction = app.introduction || (app.introduction = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var settings;
    (function (settings) {
        var SettingsCtrl = (function () {
            function SettingsCtrl(_scope, _socketSvc, _ionicPopup, _ionicModel, _ionicLoading) {
                this._scope = _scope;
                this._socketSvc = _socketSvc;
                this._ionicPopup = _ionicPopup;
                this._ionicModel = _ionicModel;
                this._ionicLoading = _ionicLoading;
                this.msgs = [];
                this.btnString = 'Start';
                this._isListening = false;
                _ionicModel.fromTemplateUrl('../../settings/settings.html', {
                    scope: _scope,
                    animation: 'slide-in-up'
                }).then(function (m) {
                    _scope.model = m;
                });
                _scope.showModal = function () {
                    _scope.model.show();
                };
                _scope.hideModal = function () {
                    _scope.model.hide();
                };
            }
            SettingsCtrl.prototype.startCommand = function () {
                var _this = this;
                if (!this._isListening) {
                    this.msgs = [];
                    this.msgs.push('Start Listening...');
                    this._isListening = true;
                    this.btnString = 'Stop';
                    this._ionicLoading.show({
                        template: 'Retrieving data...<br />Please wait...'
                    });
                    this._socketSvc.StartListening(this.ipAddress, this.portNum, function (msg) {
                        _this.msgs.push("Data received at " + msg.timeStamp);
                        if (!_this._gotDirective) {
                            _this._ionicLoading.hide();
                            _this._gotDirective = true;
                        }
                    }, function (err) {
                        _this._ionicLoading.hide();
                        _this.msgs.push(err);
                        _this._ionicPopup.show({
                            title: 'Error!',
                            template: 'An error occured while connecting to server...',
                            buttons: [{ text: 'OK' }]
                        });
                        _this._isListening = false;
                        _this.btnString = 'Start';
                    });
                }
                else {
                    this.msgs.push('Stop Listening...');
                    this._socketSvc.StopListening();
                    this._isListening = false;
                    this.btnString = 'Start';
                }
            };
            SettingsCtrl.$inject = ['$scope', 'SocketSvc', '$ionicPopup', '$ionicModal', '$ionicLoading'];
            return SettingsCtrl;
        })();
        angular.module('app').controller('SettingsCtrl', SettingsCtrl);
    })(settings = app.settings || (app.settings = {}));
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,