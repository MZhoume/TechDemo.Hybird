/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var SocketSvc = (function () {
            function SocketSvc() {
            }
            SocketSvc.prototype.StartListening = function (ipAddr, portNum, callback, errCallback) {
                console.log('Connectiong to: ' + ipAddr + ':' + portNum);
                this._isListening = true;
                try {
                    this._socket = new WebSocket("ws://" + ipAddr + ':' + portNum);
                    this._socket.onmessage = callback;
                }
                catch (err) {
                    errCallback(err);
                }
                finally {
                    if (this._socket.readyState != WebSocket.OPEN && this._socket.readyState != WebSocket.CONNECTING) {
                        errCallback('An error occured while connecting to server...');
                        return;
                    }
                    this._socket.onerror = function (e) { return errCallback('Error -- ' + e.timeStamp.toString()); };
                }
            };
            SocketSvc.prototype.StopListening = function () {
                console.log('Disconnecting...');
                this._isListening = false;
                this._socket.close();
                this._socket.onmessage = null;
                this._socket.onerror = null;
            };
            SocketSvc.prototype.SendStr = function (str) {
                this._socket.send(str);
            };
            return SocketSvc;
        })();
        angular.module('app').service('SocketSvc', SocketSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var service;
    (function (service) {
        var DataSvc = (function () {
            function DataSvc() {
                this.onIntroductionReceived = function () {
                };
                this.onDataReceived = function () {
                };
                this.onDirectiveReceived = function () {
                };
            }
            DataSvc.prototype.onMsgReceived = function (msg) {
                if (!this._hasInited) {
                    this._hasInited = true;
                    var payload = JSON.parse(msg.data);
                    eval(payload.DataCtrl);
                    this.onIntroductionReceived(payload.Introduction);
                    this.onDirectiveReceived(payload.Directive);
                }
                else {
                    var data = JSON.parse(msg.data);
                    for (var i = 0; i < data.length; i++) {
                        var e = data[i];
                        this.Data[i].push(e);
                    }
                    this.onDataReceived(data);
                }
            };
            return DataSvc;
        })();
        angular.module('app').service('DataSvc', DataSvc);
    })(service = app.service || (app.service = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="./service/socketSvc.ts" />
/// <reference path="./service/dataSvc.ts" />
/// <reference path="./interfaces/interface.ts" /> 

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var ChartCtrl = (function () {
            function ChartCtrl() {
                this.title = 'Chart';
            }
            return ChartCtrl;
        })();
        angular.module('app').controller('home.ChartCtrl', ChartCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var home;
    (function (home) {
        var MonitorCtrl = (function () {
            function MonitorCtrl(_dataSvc) {
                this._dataSvc = _dataSvc;
                this.Data = [{
                    rowid: 0,
                    ServerID: 1,
                    Names: ['aaa', 'bbb', 'ccc'],
                    Values: [2, 3, 4]
                }];
            }
            MonitorCtrl.$inject = ['DataSvc'];
            return MonitorCtrl;
        })();
        angular.module('app').controller('home.MonitorCtrl', MonitorCtrl);
    })(home = app.home || (app.home = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var introduction;
    (function (introduction) {
        var IntroductionCtrl = (function () {
            function IntroductionCtrl(_dataSvc) {
                var _this = this;
                this._dataSvc = _dataSvc;
                this.introduction = 'Please open settings pane for connecting to the server.';
                this._dataSvc.onIntroductionReceived = function (i) {
                    _this.introduction = i;
                };
            }
            IntroductionCtrl.$inject = ['DataSvc'];
            return IntroductionCtrl;
        })();
        angular.module('app').controller('IntroductionCtrl', IntroductionCtrl);
    })(introduction = app.introduction || (app.introduction = {}));
})(app || (app = {}));

/// <reference path="../_reference.ts" />
var app;
(function (app) {
    var settings;
    (function (settings) {
        var SettingsCtrl = (function () {
            function SettingsCtrl(_scope, _socketSvc, _ionicPopup, _dataSvc, _ionicModel) {
                this._scope = _scope;
                this._socketSvc = _socketSvc;
                this._ionicPopup = _ionicPopup;
                this._dataSvc = _dataSvc;
                this._ionicModel = _ionicModel;
                this.msgs = [];
                this.btnString = 'Start';
                this._isListening = false;
                _ionicModel.fromTemplateUrl('../../settings/settings.html', {
                    scope: _scope,
                    animation: 'slide-in-up'
                }).then(function (m) {
                    _scope.model = m;
                });
                _scope.showModal = function () {
                    _scope.model.show();
                };
                _scope.hideModal = function () {
                    _scope.model.hide();
                };
            }
            SettingsCtrl.prototype.startCommand = function () {
                var _this = this;
                if (!this._isListening) {
                    this.msgs = [];
                    this.msgs.push('Start Listening...');
                    this._isListening = true;
                    this.btnString = 'Stop';
                    this._socketSvc.StartListening(this.ipAddress, this.portNum, function (msg) {
                        _this.msgs.push("Data received at " + msg.timeStamp);
                        _this._dataSvc.onMsgReceived(msg);
                    }, function (err) {
                        _this.msgs.push(err);
                        _this._ionicPopup.show({
                            title: 'Error!',
                            template: 'An error occured while connecting to server...',
                            buttons: [{ text: 'OK' }]
                        });
                        _this._isListening = false;
                        _this.btnString = 'Start';
                    });
                    setTimeout(function () {
                        _this._socketSvc.SendStr('a');
                    }, 3000);
                }
                else {
                    this.msgs.push('Stop Listening...');
                    this._socketSvc.StopListening();
                    this._isListening = false;
                    this.btnString = 'Start';
                }
            };
            SettingsCtrl.$inject = ['$scope', 'SocketSvc', '$ionicPopup', 'DataSvc', '$ionicModal'];
            return SettingsCtrl;
        })();
        angular.module('app').controller('SettingsCtrl', SettingsCtrl);
    })(settings = app.settings || (app.settings = {}));
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,